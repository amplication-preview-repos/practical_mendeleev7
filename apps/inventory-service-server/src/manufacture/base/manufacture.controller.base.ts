/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ManufactureService } from "../manufacture.service";
import { ManufactureCreateInput } from "./ManufactureCreateInput";
import { Manufacture } from "./Manufacture";
import { ManufactureFindManyArgs } from "./ManufactureFindManyArgs";
import { ManufactureWhereUniqueInput } from "./ManufactureWhereUniqueInput";
import { ManufactureUpdateInput } from "./ManufactureUpdateInput";

export class ManufactureControllerBase {
  constructor(protected readonly service: ManufactureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Manufacture })
  async createManufacture(
    @common.Body() data: ManufactureCreateInput
  ): Promise<Manufacture> {
    return await this.service.createManufacture({
      data: data,
      select: {
        createdAt: true,
        id: true,
        manufactureCode: true,
        manufactureId: true,
        manufactureName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Manufacture] })
  @ApiNestedQuery(ManufactureFindManyArgs)
  async manufactures(@common.Req() request: Request): Promise<Manufacture[]> {
    const args = plainToClass(ManufactureFindManyArgs, request.query);
    return this.service.manufactures({
      ...args,
      select: {
        createdAt: true,
        id: true,
        manufactureCode: true,
        manufactureId: true,
        manufactureName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Manufacture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async manufacture(
    @common.Param() params: ManufactureWhereUniqueInput
  ): Promise<Manufacture | null> {
    const result = await this.service.manufacture({
      where: params,
      select: {
        createdAt: true,
        id: true,
        manufactureCode: true,
        manufactureId: true,
        manufactureName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Manufacture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateManufacture(
    @common.Param() params: ManufactureWhereUniqueInput,
    @common.Body() data: ManufactureUpdateInput
  ): Promise<Manufacture | null> {
    try {
      return await this.service.updateManufacture({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          manufactureCode: true,
          manufactureId: true,
          manufactureName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Manufacture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteManufacture(
    @common.Param() params: ManufactureWhereUniqueInput
  ): Promise<Manufacture | null> {
    try {
      return await this.service.deleteManufacture({
        where: params,
        select: {
          createdAt: true,
          id: true,
          manufactureCode: true,
          manufactureId: true,
          manufactureName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
