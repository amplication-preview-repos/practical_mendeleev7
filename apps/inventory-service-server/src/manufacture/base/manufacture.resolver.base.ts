/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Manufacture } from "./Manufacture";
import { ManufactureCountArgs } from "./ManufactureCountArgs";
import { ManufactureFindManyArgs } from "./ManufactureFindManyArgs";
import { ManufactureFindUniqueArgs } from "./ManufactureFindUniqueArgs";
import { CreateManufactureArgs } from "./CreateManufactureArgs";
import { UpdateManufactureArgs } from "./UpdateManufactureArgs";
import { DeleteManufactureArgs } from "./DeleteManufactureArgs";
import { ManufactureService } from "../manufacture.service";
@graphql.Resolver(() => Manufacture)
export class ManufactureResolverBase {
  constructor(protected readonly service: ManufactureService) {}

  async _manufacturesMeta(
    @graphql.Args() args: ManufactureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Manufacture])
  async manufactures(
    @graphql.Args() args: ManufactureFindManyArgs
  ): Promise<Manufacture[]> {
    return this.service.manufactures(args);
  }

  @graphql.Query(() => Manufacture, { nullable: true })
  async manufacture(
    @graphql.Args() args: ManufactureFindUniqueArgs
  ): Promise<Manufacture | null> {
    const result = await this.service.manufacture(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Manufacture)
  async createManufacture(
    @graphql.Args() args: CreateManufactureArgs
  ): Promise<Manufacture> {
    return await this.service.createManufacture({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Manufacture)
  async updateManufacture(
    @graphql.Args() args: UpdateManufactureArgs
  ): Promise<Manufacture | null> {
    try {
      return await this.service.updateManufacture({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Manufacture)
  async deleteManufacture(
    @graphql.Args() args: DeleteManufactureArgs
  ): Promise<Manufacture | null> {
    try {
      return await this.service.deleteManufacture(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
