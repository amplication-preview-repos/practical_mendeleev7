/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SkuService } from "../sku.service";
import { SkuCreateInput } from "./SkuCreateInput";
import { Sku } from "./Sku";
import { SkuFindManyArgs } from "./SkuFindManyArgs";
import { SkuWhereUniqueInput } from "./SkuWhereUniqueInput";
import { SkuUpdateInput } from "./SkuUpdateInput";

export class SkuControllerBase {
  constructor(protected readonly service: SkuService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sku })
  async createSku(@common.Body() data: SkuCreateInput): Promise<Sku> {
    return await this.service.createSku({
      data: data,
      select: {
        createdAt: true,
        id: true,
        partno: true,
        skuId: true,
        skuItemId: true,
        skuManuId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sku] })
  @ApiNestedQuery(SkuFindManyArgs)
  async skus(@common.Req() request: Request): Promise<Sku[]> {
    const args = plainToClass(SkuFindManyArgs, request.query);
    return this.service.skus({
      ...args,
      select: {
        createdAt: true,
        id: true,
        partno: true,
        skuId: true,
        skuItemId: true,
        skuManuId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sku })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sku(@common.Param() params: SkuWhereUniqueInput): Promise<Sku | null> {
    const result = await this.service.sku({
      where: params,
      select: {
        createdAt: true,
        id: true,
        partno: true,
        skuId: true,
        skuItemId: true,
        skuManuId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sku })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSku(
    @common.Param() params: SkuWhereUniqueInput,
    @common.Body() data: SkuUpdateInput
  ): Promise<Sku | null> {
    try {
      return await this.service.updateSku({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          partno: true,
          skuId: true,
          skuItemId: true,
          skuManuId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sku })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSku(
    @common.Param() params: SkuWhereUniqueInput
  ): Promise<Sku | null> {
    try {
      return await this.service.deleteSku({
        where: params,
        select: {
          createdAt: true,
          id: true,
          partno: true,
          skuId: true,
          skuItemId: true,
          skuManuId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
