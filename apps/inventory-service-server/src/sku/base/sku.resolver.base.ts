/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sku } from "./Sku";
import { SkuCountArgs } from "./SkuCountArgs";
import { SkuFindManyArgs } from "./SkuFindManyArgs";
import { SkuFindUniqueArgs } from "./SkuFindUniqueArgs";
import { CreateSkuArgs } from "./CreateSkuArgs";
import { UpdateSkuArgs } from "./UpdateSkuArgs";
import { DeleteSkuArgs } from "./DeleteSkuArgs";
import { SkuService } from "../sku.service";
@graphql.Resolver(() => Sku)
export class SkuResolverBase {
  constructor(protected readonly service: SkuService) {}

  async _skusMeta(
    @graphql.Args() args: SkuCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sku])
  async skus(@graphql.Args() args: SkuFindManyArgs): Promise<Sku[]> {
    return this.service.skus(args);
  }

  @graphql.Query(() => Sku, { nullable: true })
  async sku(@graphql.Args() args: SkuFindUniqueArgs): Promise<Sku | null> {
    const result = await this.service.sku(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sku)
  async createSku(@graphql.Args() args: CreateSkuArgs): Promise<Sku> {
    return await this.service.createSku({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Sku)
  async updateSku(@graphql.Args() args: UpdateSkuArgs): Promise<Sku | null> {
    try {
      return await this.service.updateSku({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sku)
  async deleteSku(@graphql.Args() args: DeleteSkuArgs): Promise<Sku | null> {
    try {
      return await this.service.deleteSku(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
